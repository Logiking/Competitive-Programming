### 二次扫描与换根法

___

这是一颗无根树，朴素的想，考虑每个点做根，然后求出最大流量，但这种算法复杂度太高$O(n^2)$，考虑先选中一个点做根，自顶向下的求出以这个点为根的最大流量，然后考虑换根，考虑根的一个子节点，若这个子节点做根，那么以这个根的子树的流量已经在第一次就求出了，那么考虑把根变成子节点的流量，若根的度数为$1$，那么到根的最大流量必然为边权$c(root,son)$，若根的度数不为$1$，那么到根的流量为$min(d[root]-min(d[son], c(root, son)),c(root, son))$

___

````c++
#include <bits/stdc++.h>

#define fi first
#define se second

using namespace std;

constexpr int inf = 0x3f3f3f3f;

using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned int;
using pii = pair<int, int>;
using piii = pair<int, pii>;
using pdd = pair<double, double>;

const int N = 2E5 + 10, M = N << 1;

int h[N], e[M], ne[M], w[M], idx;
int d[N], f[N], vis[N], deg[N];

void add(int a, int b, int c) {
    e[idx] = b, ne[idx] = h[a], w[idx] = c, h[a] = idx ++;
}

void dp(int u) {
    vis[u] = 1;
    d[u] = 0;
    
    for (int i = h[u]; ~i; i = ne[i]) {
        int v = e[i];
        if (vis[v])
            continue;
        dp(v);
        if (deg[v] == 1)
            d[u] += w[i];
        else
            d[u] += min(w[i], d[v]);
    }

    vis[u] = 0;
}

void dfs(int u) {
    vis[u] = 1;
    
    for (int i = h[u]; ~i; i = ne[i]) {
        int v = e[i];
        if (vis[v])
            continue;
        f[v] = d[v];
        if (deg[u] == 1)
            f[v] += w[i];
        else if (deg[u] > 1)
            f[v] += min(w[i], f[u] - min(d[v], w[i]));
        dfs(v);
    }

    vis[u] = 0;
}

void work() {
    int n;
    cin >> n;

    idx = 0;
    memset(deg, 0, sizeof deg);
    memset(h, -1, sizeof h);

    for (int i = 1; i <= n - 1; i ++) {
        int x, y, z;
        cin >> x >> y >> z;
        add(x, y, z);
        add(y, x, z);
        deg[x] ++, deg[y] ++;
    }

    dp(1);
    f[1] = d[1];
    dfs(1);

    int ans = -(1 << 30);
    for (int i = 1; i <= n; i ++)
        ans = max(ans, f[i]);

    cout << ans << "\n";
}

int main() {
    cin.tie(nullptr)->sync_with_stdio(false);

    int _;
    for (cin >> _; _; _ --)
        work();

    return 0;
}

````

